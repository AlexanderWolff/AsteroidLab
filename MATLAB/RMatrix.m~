classdef RMatrix < handle 
    properties (GetAccess='public', SetAccess='public')
       
       R
       
    end
    
    
    methods (Static)
       
        function this = fromXYZ(xyz)
           % From fixed angles X-Y-Z 
            x = xyz(1);
            y = xyz(2);
            z = xyz(3);
           
            cx = cos(x);
            sx = sin(x);
            cy = cos(y);
            sy = sin(y);
            cz = cos(z);
            sz = sin(z);
            
            R = ...
            [ cz*cy, (cz*sy*sx)-(sz*cx), (cz*sy*cx)+(sz*sx);...
              sz*cy, (sz*sy*sx)+(cz*cx), (sz*sy*cx)-(cz*sx); ...
                -sy,              cy*sx,             cy*cx];
            
            this = RMatrix(R);
        end
        
        function this = FromXYZ(xyz)
            % From fixed angles X-Y-Z 
            x = xyz(1);
            y = xyz(2);
            z = xyz(3);
            
            cx = cos(x);
            sx = sin(x);
            cy = cos(y);
            sy = sin(y);
            cz = cos(z);
            sz = sin(z);
            
            Rz = [cz, -sz, 0;...
                  sz,  cz, 0;...
                   0,   0, 1];
               
            Ry = [cy,  0, sy;...
                   0,  1,  0;...
                 -sy,  0, cy];
             
            Rx = [ 1,  0,  0;...
                   0, cx,-sx;...
                   0, sx, cx];
               
            R = Rz*Ry*Rx;
            
            this = RMatrix(R); 
        end
        
        function this = fromZYZe(zyz)
           % From Euler angles Z-Y-Z 
            z1 = zyz(1);
            y =  zyz(2);
            z2 = zyz(3);
           
            cz1 = cos(z1);
            sz1 = sin(z1);
            cy = cos(y);
            sy = sin(y);
            cz2 = cos(z2);
            sz2 = sin(z2);
            
            R = ...
    [ (cz1*cy*cz2)-(sz1*sz2), (-cz1*cy*sz2)-(sz1*cz2), cz1*sy;...
      (sz1*cy*cz2)+(cz1*cz2), (-sz1*cy*sz2)+(cz1*cz2), sz1*sy; ...
                     -sy*cz2,                  sy*sz2,    cy];
            
            this = RMatrix(R);
        end
        
        function this = fromAngleAxis(in)
           % From angle (double), axis (1x3 Vector) 
           % representation 
           
           angle = in(1);
           axis = in(2:4);
           
           c = cos(angle);
           s = sin(angle);
           v = 1-c;
           
           kx = axis(1);
           ky = axis(2);
           kz = axis(3);
           
           R = ...
           [(kx*kx*v)+c, (kx*ky*v)-(kz*s), (kx*kz*v)+(ky*s);...
            (kx*ky*v)+(kz*s), (ky*ky*v)+c, (ky*kz*v)-(kx*s);...
            (kx*kz*v)-(ky*s), (ky*kz*v)+(kx*s), (kz*kz*v)+c];
        
            this = RMatrix(R);
        end
        
    end
    
    methods 
       
        function this = RMatrix(R)
           this.R = R; 
        end
        
        function xyz = toXYZ(this)
            % Converts this Rotation Matrix to XYZ
            % Fixed Angle Representation
            r = this.R;
            
            y = atan2(-r(3,1),sqrt((r(1,1)^2) + (r(2,1)^2)));
            
            if y == pi/2
                % Special Case 1
                z = 0;
                x = atan2(r(1,2), r(2,2));
                
            else
                if y == -pi/2
                    % Special Case 2
                    z = 0;
                    x = -atan2(r(1,2), r(2,2));
                    
                else
                    % General Case
                    cy = cos(y);
                    z = atan2(r(2,1)/cy, r(1,1)/cy);
                    x = atan2(r(3,2)/cy, r(3,3)/cy);
                end
            end
            
            xyz = [x,y,z];
        end
        
        function zyz = toZYZe(this)
            % Converts this Rotation Matrix to ZYZ
            % Euler Angle Representation
            r = this.R;
            
            y = atan2(sqrt((r(3,1)^2) + (r(3,2)^2)),r(3,3));
            
            if y == 0
                % Special Case 1
                z1 = 0;
                z2 = atan2(-r(1,2), r(1,1));
                
            else
                if y == pi
                    % Special Case 2
                    z1 = 0;
                    z2 = atan2(r(1,2), -r(1,1));
                    
                else
                    % General Case
                    sy = sin(y);
                    z1 = atan2(r(2,3)/sy, r(1,3)/sy);
                    z2 = atan2(r(3,2)/sy,-r(3,1)/sy);
                end
            end
            
            zyz = [z1,y,z2];
        end
        
        function out = toAngleAxis(this)
            % Converts to Angle Axis Representation
            r = this.R;
            
            angle = acos((r(1,1)+r(2,2)+r(3,3)-1)/2);
            
            if angle == 0
                % Special Case 1
                axis = [0,0,0];
            else
                if angle == pi
                    % Special Case 2
                    axis = [0,0,0];
                else
                    % General Case
                    
                    mult = (1/2*sin(angle));
                    mult = sqrt( ()^2+...
                        ()^2+()^2);
                    
                    axis = mult*...
                        [r(3,2)-r(2,3);r(1,3)-r(3,1);r(2,1)-r(1,2)];
                    
                   
                end
            end
            
            out = [angle,axis'];
        end
    end
    
end