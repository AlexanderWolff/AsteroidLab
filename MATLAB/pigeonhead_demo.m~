

sim = Simulation('UR3');


%% Pigeonhead Motion
% Moving Joint 0 will rotate wrist to maintain orientation

%% Begin Inverse Kinematics
% Initialise Pose
joints = [0,0,0,0,90,40];
sim.ForwardKinematics(joints);
Target = Homogeneous.fromT([-0.2,-0.3,0.4] );
%plotSim(sim, Target, '');

history = 2;
joint_history = zeros(history,length(joints));
joint_history(1,:) = sim.joints.deg;



disp('START')
for i = 2:history
    
    % Current Joints
    j1 = joint_history(i-1,1);
    j2 = joint_history(i-1,2);
    j3 = joint_history(i-1,3);
    j4 = joint_history(i-1,4);
    j5 = joint_history(i-1,5);
    j6 = joint_history(i-1,6);

    %% J4-J3-J2 Triangle
    F2 = sim.transform.local{2};
    F3 = sim.transform.local{3};
    F4 = sim.transform.local{4};

    J2 = F2.T;
    J3 = F3.T;
    J4 = F4.T;
    
    % L1 : J2 and J3
    L1 = sqrt( (J2(1)-J3(1))^2 + (J2(2)-J3(2))^2 + (J2(3)-J3(3))^2 );

    % L2 : J3 and J4
    L2 = sqrt( (J3(1)-J4(1))^2 + (J3(2)-J4(2))^2 + (J3(3)-J4(3))^2 );

    % Shoulder : J2
    Js = j2;

    % Elbow : J3
    Je = j3;

    % Current Altitude of Wrist : Distance J2 to J4
    Altitude.wrist = sqrt( (J2(1)-J4(1))^2 + (J2(2)-J4(2))^2 + (J2(3)-J4(3))^2 );
     
    % Altitude of Tool

    % Altitude of Target

    % Difference in Altitude

    % New altitude of wrist
    Altitude.new = Altitude.wrist * 0.5;

    [new_Js, new_Je] = AltitudeControl(Js, Je, L1, L2, 'Altitude', Altitude.new);

    new_j2 = rad2deg(new_Js;
    new_j3 = new_Je;

    joint_history(i,:) = [j1, new_j2, new_j3, j4, j5, j6];
    sim.ForwardKinematics([j1, new_j2, new_j3, j4, j5, j6]);
end


plotJoints_Time(sim, Target, joint_history)